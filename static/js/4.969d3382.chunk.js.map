{"version":3,"sources":["components/Experience.jsx"],"names":["styles","ulStyle","listStylePosition","paddingLeft","subtitleContainerStyle","marginTop","marginBottom","subtitleStyle","display","inlineChild","itemStyle","Experience","props","theme","useContext","ThemeContext","header","data","setData","useState","useEffect","fetch","endpoints","experiences","method","then","res","json","catch","err","React","createElement","Fragment","Header","title","className","Container","Timeline","lineColor","timelineLineColor","map","item","Fade","TimelineItem","key","dateText","dateInnerStyle","background","accentColor","style","bodyContainerStyle","color","subtitle","workType","workDescription","point","ReactMarkdown","children","components","p","FallbackSpinner"],"mappings":"2IAAA,2GAYA,MAAMA,EAAS,CACbC,QAAS,CACPC,kBAAmB,UACnBC,YAAa,IAEfC,uBAAwB,CACtBC,UAAW,GACXC,aAAc,IAEhBC,cAAe,CACbC,QAAS,gBAEXC,YAAa,CACXD,QAAS,gBAEXE,UAAW,CACTJ,aAAc,KAmFHK,UA/Ef,SAAoBC,GAClB,MAAMC,EAAQC,qBAAWC,MACnB,OAAEC,GAAWJ,GACZK,EAAMC,GAAWC,mBAAS,MAWjC,OATAC,oBAAU,KACRC,MAAMC,IAAUC,YAAa,CAC3BC,OAAQ,QAEPC,KAAMC,GAAQA,EAAIC,QAClBF,KAAMC,GAAQR,EAAQQ,EAAIH,cAC1BK,MAAOC,GAAQA,IACjB,IAGDC,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAACE,UAAM,CAACC,MAAOlB,IAEdC,EAEGa,IAAAC,cAAA,OAAKI,UAAU,6BACbL,IAAAC,cAACK,IAAS,KACRN,IAAAC,cAACM,WAAQ,CACPC,UAAWzB,EAAM0B,mBAEhBtB,EAAKuB,IAAKC,GACTX,IAAAC,cAACW,IAAI,KACHZ,IAAAC,cAACY,eAAY,CACXC,IAAKH,EAAKP,MAAQO,EAAKI,SACvBA,SAAUJ,EAAKI,SACfC,eAAgB,CAAEC,WAAYlC,EAAMmC,aACpCC,MAAOjD,EAAOU,UACdwC,mBAAoB,CAAEC,MAAOtC,EAAMsC,QAEnCrB,IAAAC,cAAA,MAAII,UAAU,cACXM,EAAKP,OAERJ,IAAAC,cAAA,OAAKkB,MAAOjD,EAAOI,wBACjB0B,IAAAC,cAAA,MAAIkB,MAAO,IAAKjD,EAAOO,cAAe4C,MAAOtC,EAAMmC,cAChDP,EAAKW,UAEPX,EAAKY,UACNvB,IAAAC,cAAA,MAAIkB,MAAOjD,EAAOS,aAAa,WAE5B,IACAgC,EAAKY,WAIVvB,IAAAC,cAAA,MAAIkB,MAAOjD,EAAOC,SACfwC,EAAKa,gBAAgBd,IAAKe,GACzBzB,IAAAC,cAAA,OAAKa,IAAKW,GACRzB,IAAAC,cAAA,UACED,IAAAC,cAACyB,IAAa,CACZC,SAAUF,EACVG,WAAY,CACVC,EAAG,WAIT7B,IAAAC,cAAA,oBAUhBD,IAAAC,cAAC6B,UAAe","file":"static/js/4.969d3382.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { Timeline, TimelineItem } from 'vertical-timeline-component-for-react';\nimport { Container } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\nimport PropTypes from 'prop-types';\nimport { ThemeContext } from 'styled-components';\nimport Fade from 'react-reveal';\nimport Header from './Header';\nimport endpoints from '../constants/endpoints';\nimport FallbackSpinner from './FallbackSpinner';\nimport '../css/experience.css';\n\nconst styles = {\n  ulStyle: {\n    listStylePosition: 'outside',\n    paddingLeft: 20,\n  },\n  subtitleContainerStyle: {\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  subtitleStyle: {\n    display: 'inline-block',\n  },\n  inlineChild: {\n    display: 'inline-block',\n  },\n  itemStyle: {\n    marginBottom: 10,\n  },\n};\n\nfunction Experience(props) {\n  const theme = useContext(ThemeContext);\n  const { header } = props;\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(endpoints.experiences, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((res) => setData(res.experiences))\n      .catch((err) => err);\n  }, []);\n\n  return (\n    <>\n      <Header title={header} />\n\n      {data\n        ? (\n          <div className=\"section-content-container\">\n            <Container>\n              <Timeline\n                lineColor={theme.timelineLineColor}\n              >\n                {data.map((item) => (\n                  <Fade>\n                    <TimelineItem\n                      key={item.title + item.dateText}\n                      dateText={item.dateText}\n                      dateInnerStyle={{ background: theme.accentColor }}\n                      style={styles.itemStyle}\n                      bodyContainerStyle={{ color: theme.color }}\n                    >\n                      <h2 className=\"item-title\">\n                        {item.title}\n                      </h2>\n                      <div style={styles.subtitleContainerStyle}>\n                        <h4 style={{ ...styles.subtitleStyle, color: theme.accentColor }}>\n                          {item.subtitle}\n                        </h4>\n                        {item.workType && (\n                        <h5 style={styles.inlineChild}>\n                    &nbsp;Â·\n                          {' '}\n                          {item.workType}\n                        </h5>\n                        )}\n                      </div>\n                      <ul style={styles.ulStyle}>\n                        {item.workDescription.map((point) => (\n                          <div key={point}>\n                            <li>\n                              <ReactMarkdown\n                                children={point}\n                                components={{\n                                  p: 'span',\n                                }}\n                              />\n                            </li>\n                            <br />\n                          </div>\n                        ))}\n                      </ul>\n                    </TimelineItem>\n                  </Fade>\n                ))}\n              </Timeline>\n            </Container>\n          </div>\n        ) : <FallbackSpinner /> }\n    </>\n  );\n}\n\nExperience.propTypes = {\n  header: PropTypes.string.isRequired,\n};\n\nexport default Experience;\n"],"sourceRoot":""}